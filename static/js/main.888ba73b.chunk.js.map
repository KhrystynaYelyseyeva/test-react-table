{"version":3,"sources":["components/Cell.js","components/columns.js","components/Table.js","App.js","index.js"],"names":["Cell","text","useState","showText","setShowText","showButton","setShowButton","useEffect","length","className","onClick","parent","target","parentElement","style","maxHeight","MAX_CELL_HEIGHT","prevState","COLUMNS","Header","accessor","cell","value","Table","columns","useMemo","data","MOCK_DATA","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","getCellProps","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"wRAMaA,EAAO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACCC,oBAAS,GADV,mBACzBC,EADyB,KACfC,EADe,OAEKF,oBAAS,GAFd,mBAEzBG,EAFyB,KAEbC,EAFa,KAIhCC,qBAAU,WACJN,EAAKO,OAPW,KAQlBF,GAAc,KAEhB,IAcF,OACE,sBACEG,UAAYR,EAAO,OAAS,aAD9B,UAGE,mBAAGQ,UAAU,OAAb,SACGR,IAEFI,GACC,wBACEI,UAAU,SACVC,QAtBiB,SAAC,GAAc,IAChCC,EAD+B,EAAZC,OACHC,cAES,SAA3BF,EAAOG,MAAMC,UACfJ,EAAOG,MAAMC,UAAY,OAEzBJ,EAAOG,MAAMC,UAAYC,QAG3BZ,GAAY,SAAAa,GAAS,OAAKA,MAWtB,SAIId,EAAW,OAAS,YCtCnBe,EAAU,CACrB,CACEC,OAAQ,iBACRC,SAAU,OACVpB,KAAM,YAAe,IAAZqB,EAAW,EAAXA,KACP,OACE,cAAC,EAAD,CAAMpB,KAAOoB,EAAKC,WCDbC,G,MAAQ,WACnB,IAAMC,EAAUC,mBAAQ,kBAAMP,IAAS,IACjCQ,EAAOD,mBAAQ,kBAAME,IAAW,IAFb,EAUrBC,mBAAS,CACXJ,UACAE,SAPAG,EALuB,EAKvBA,cACAC,EANuB,EAMvBA,kBACAC,EAPuB,EAOvBA,aACAC,EARuB,EAQvBA,KACAC,EATuB,EASvBA,WAMF,OACE,mCACE,kDAAWJ,KAAX,cACE,gCACGE,EAAaG,KAAI,SAAAC,GAAW,OAC3B,8CAAQA,EAAYC,uBAApB,aACGD,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC7B,8CAAQA,EAAOC,kBAAf,aACGD,EAAOE,OAAO,wBAMzB,iDAAWV,KAAX,aACGE,EAAKE,KAAI,SAAAO,GAER,OADAR,EAAWQ,GAET,8CAAQA,EAAIC,eAAZ,aACGD,EAAIE,MAAMT,KAAI,SAAAb,GAAI,OACjB,8CAAQA,EAAKuB,gBAAb,aAA8BvB,EAAKmB,OAAO,+BC/B7CK,MARf,WACE,OACE,qBAAKpC,UAAU,MAAf,SACE,cAAC,EAAD,OCDNqC,IAASN,OACP,cAAC,IAAMO,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.888ba73b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport './Cell.css'\r\n\r\nconst MAX_CELL_HEIGHT = '100';\r\nconst MAX_TEXT_LENGTH = 200;\r\n\r\nexport const Cell = ({ text }) => {\r\n  const [showText, setShowText ] = useState(false);\r\n  const [showButton, setShowButton ] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (text.length > MAX_TEXT_LENGTH) {\r\n      setShowButton(true)\r\n    }\r\n  },[])\r\n\r\n  const toggleVisibility = ({target}) => {\r\n    const parent = target.parentElement\r\n\r\n    if (parent.style.maxHeight !== '100%') {\r\n      parent.style.maxHeight = '100%'\r\n    } else {\r\n      parent.style.maxHeight = MAX_CELL_HEIGHT + 'px'\r\n    }\r\n\r\n    setShowText(prevState => !prevState)\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={ text ? 'cell' : 'cell--hide'}\r\n    >\r\n      <p className=\"text\">\r\n        {text}\r\n      </p>\r\n      {showButton && (\r\n        <button\r\n          className='button'\r\n          onClick={toggleVisibility}\r\n        >\r\n          { showText ? 'Hide' : '...'}\r\n        </button>\r\n        )\r\n      }\r\n    </div>\r\n  )\r\n}","import { Cell } from \"./Cell\";\r\n\r\nexport const COLUMNS = [\r\n  {\r\n    Header: '- custom CSS -',\r\n    accessor: 'text',\r\n    Cell: ({ cell }) => {\r\n      return (\r\n        <Cell text={ cell.value } />\r\n      )\r\n    }\r\n  },\r\n]\r\n","import React, { useMemo } from 'react'\r\nimport { useTable } from 'react-table'\r\nimport MOCK_DATA from '../api/MOCK_DATA.json'\r\nimport { COLUMNS } from './columns'\r\n\r\nimport \"./Table.css\"\r\n\r\nexport const Table = () => {\r\n  const columns = useMemo(() => COLUMNS, [])\r\n  const data = useMemo(() => MOCK_DATA, [])\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow\r\n  } = useTable({\r\n    columns,\r\n    data\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th {...column.getHeaderProps()}>\r\n                  {column.render('Header')}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map(row => {\r\n            prepareRow(row)\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => (\r\n                  <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                ))}\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  )\r\n}","import {Table} from \"./components/Table\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}